- RAM & ROM unit of 4 bytes
- Harvard architecture, program executes from ROM
- General purpose registers 0x00~0xff shared with RAM
- SP is fixed at last memory element
- Program counter PC invisible from program
- Instruction encoding is 4-byte; the first byte is opcode

Arithmetic
# opcode: 1x - op, 2x - n, 3x - i, 4x - hi
<op>    <A> <B> <C>     A := B (op) C
<op>n   <A> <B> <Imm8>  A := B (op) Imm8
<op>i   <A> <Imm16>     A := A (op) Imm16
<op>hi  <A> <Imm16>     A := A (op) (Imm16 << 16)
- <op>: mov/add/sub/mul/and/or/xor/bic/lsr/asr/lsl
  - 'mov' returns the second operand

Memory
# opcode: 7x
ld    <A> <B> <Imm8>  A := [B + Imm8]
st    <A> <B> <Imm8>  [B + Imm8] := A
ldc   <A> <B> <Imm8>  A := ROM[B + Imm8]
ldcr  <A> <B> <Imm8>  A := ROM[PC + B + Imm8]

Control flow
# opcode: 8x - br, 9x - brr, Ax - ba
br<cond>  <A> <B> <Imm8>  PC := PC + Imm8
brr<cond> <A> <B> <C>     PC := PC + C
ba<cond>  <A> <B> <C>     PC := C
- <cond>: al/eq/ne/gt/lt/ge/le/sgt/slt/sge/sle
baf       <Imm24>         PC := Imm24

Stack & subroutines
# opcode: Cx
push  <A> <B>         SP := SP - B; store A registers starting from B
pop   <A> <B>
call  <Imm24>         push PC+1; baf Imm24
# call  <A> <B> <Imm8>  push PC+1; push A B; br Imm8
# callf <A> <Imm16>     push PC+1; push =0 A; br Imm16
# calla <A> <B> <C>     push PC+1; push =0 A; ba C
ret   <A> <B>         pop A B; pop PC

System
# opcode: 0x
sc  <Imm24>   System call
