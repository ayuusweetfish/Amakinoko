diff --git a/darwin/combobox.m b/darwin/combobox.m
index cc2f330..bd0e7b8 100644
--- a/darwin/combobox.m
+++ b/darwin/combobox.m
@@ -81,6 +81,17 @@ void uiComboboxAppend(uiCombobox *c, const char *text)
 	[c->pbac addObject:uiprivToNSString(text)];
 }
 
+void uiComboboxDelete(uiCombobox *c, int n)
+{
+	[c->pbac removeObjectAtArrangedObjectIndex:n];
+}
+
+void uiComboboxClear(uiCombobox *c)
+{
+	NSRange range = NSMakeRange(0, [[c->pbac arrangedObjects] count]);
+	[c->pbac removeObjectsAtArrangedObjectIndexes:[NSIndexSet indexSetWithIndexesInRange:range]];
+}
+
 int uiComboboxSelected(uiCombobox *c)
 {
 	return [c->pb indexOfSelectedItem];
diff --git a/darwin/multilineentry.m b/darwin/multilineentry.m
index d57284a..b70135c 100644
--- a/darwin/multilineentry.m
+++ b/darwin/multilineentry.m
@@ -15,6 +15,7 @@ struct uiMultilineEntry {
 	NSScrollView *sv;
 	intrinsicSizeTextView *tv;
 	uiprivScrollViewData *d;
+	NSFont *font;
 	void (*onChanged)(uiMultilineEntry *, void *);
 	void *onChangedData;
 	BOOL changing;
@@ -62,6 +63,7 @@ static void uiMultilineEntryDestroy(uiControl *c)
 	uiprivScrollViewFreeData(e->sv, e->d);
 	[e->tv release];
 	[e->sv release];
+	[e->font release];
 	uiFreeControl(uiControl(e));
 }
 
@@ -77,6 +79,12 @@ char *uiMultilineEntryText(uiMultilineEntry *e)
 
 void uiMultilineEntrySetText(uiMultilineEntry *e, const char *text)
 {
+	// workaround for empty text losing attributes
+	if ([[e->tv textStorage] length] == 0) {
+		[[e->tv textStorage] replaceCharactersInRange:NSMakeRange(0, 0)
+			withString:uiprivToNSString(" ")];
+		[[e->tv textStorage] setFont:e->font];
+	}
 	[[e->tv textStorage] replaceCharactersInRange:NSMakeRange(0, [[e->tv string] length])
 		withString:uiprivToNSString(text)];
 	// must be called explicitly according to the documentation of shouldChangeTextInRange:replacementString:
@@ -199,13 +207,20 @@ static uiMultilineEntry *finishMultilineEntry(BOOL hscroll)
 	[[e->tv textContainer] setContainerSize:NSMakeSize(CGFLOAT_MAX, CGFLOAT_MAX)];
 
 	// don't use uiDarwinSetControlFont() directly; we have to do a little extra work to set the font
-	font = [NSFont systemFontOfSize:[NSFont systemFontSizeForControlSize:NSRegularControlSize]];
+	if ([NSFont respondsToSelector:@selector(monospacedSystemFontOfSize:weight:)]) {
+		font = [NSFont monospacedSystemFontOfSize:[NSFont systemFontSizeForControlSize:NSRegularControlSize]
+		               weight:NSFontWeightRegular];
+	} else {
+		font = [NSFont fontWithName:@"Menlo" size:[NSFont systemFontSizeForControlSize:NSRegularControlSize]];
+	}
 	[e->tv setTypingAttributes:[NSDictionary
 		dictionaryWithObject:font
 		forKey:NSFontAttributeName]];
 	// e->tv font from Interface Builder is nil, but setFont:nil throws an exception
 	// let's just set it to the standard control font anyway, just to be safe
 	[e->tv setFont:font];
+	[[e->tv textStorage] setFont:font];
+	e->font = font;
 
 	memset(&p, 0, sizeof (uiprivScrollViewCreateParams));
 	p.DocumentView = e->tv;
diff --git a/ui.h b/ui.h
index 40aea94..f240439 100644
--- a/ui.h
+++ b/ui.h
@@ -226,6 +226,8 @@ _UI_EXTERN uiSeparator *uiNewVerticalSeparator(void);
 typedef struct uiCombobox uiCombobox;
 #define uiCombobox(this) ((uiCombobox *) (this))
 _UI_EXTERN void uiComboboxAppend(uiCombobox *c, const char *text);
+_UI_EXTERN void uiComboboxDelete(uiCombobox *c, int n);
+_UI_EXTERN void uiComboboxClear(uiCombobox *c);
 _UI_EXTERN int uiComboboxSelected(uiCombobox *c);
 _UI_EXTERN void uiComboboxSetSelected(uiCombobox *c, int n);
 _UI_EXTERN void uiComboboxOnSelected(uiCombobox *c, void (*f)(uiCombobox *c, void *data), void *data);
diff --git a/windows/combobox.cpp b/windows/combobox.cpp
index 50f49dd..5aff981 100644
--- a/windows/combobox.cpp
+++ b/windows/combobox.cpp
@@ -69,6 +69,29 @@ void uiComboboxAppend(uiCombobox *c, const char *text)
 	uiprivFree(wtext);
 }
 
+void uiComboboxDelete(uiCombobox *c, int n)
+{
+	LRESULT res;
+
+	res = SendMessage(c->hwnd, CB_DELETESTRING, (WPARAM) n, 0);
+	if (res == (LRESULT) CB_ERR)
+		logLastError(L"error delete item from uiCombobox");
+}
+
+void uiComboboxClear(uiCombobox *c)
+{
+    LRESULT n;
+
+	n = SendMessage(c->hwnd, CB_GETCOUNT, 0, 0);
+	if (n == (LRESULT) CB_ERR) {
+		logLastError(L"error retrieving number of items from uiCombobox");
+		return;
+    }
+
+	for (int i = n - 1; i >= 0; i--)
+		uiComboboxDelete(c, i);
+}
+
 int uiComboboxSelected(uiCombobox *c)
 {
 	LRESULT n;
